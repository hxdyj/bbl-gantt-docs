import{_ as t,c as a,o as i,ag as r}from"./chunks/framework.UtM2fnOC.js";const u=JSON.parse('{"title":"Time Class","description":"","frontmatter":{"layout":"doc","footer":false},"headers":[],"relativePath":"en/api/time-class.md","filePath":"en/api/time-class.md","lastUpdated":1756979819000}'),o={name:"en/api/time-class.md"};function n(s,e,h,l,c,d){return i(),a("div",null,[...e[0]||(e[0]=[r('<h1 id="time-class" tabindex="-1">Time Class <a class="header-anchor" href="#time-class" aria-label="Permalink to &quot;Time Class&quot;">​</a></h1><p>Class for time-related operations, such as calculating the scale of the time axis, calculating the time based on the x coordinate, and calculating the x coordinate based on the time.</p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><h3 id="constructor-1" tabindex="-1">constructor <a class="header-anchor" href="#constructor-1" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>Parameters: <code>(gantt: Gantt)</code></p><p>constructor function, which takes the Gantt instance as a parameter.</p><h2 id="instance-properties" tabindex="-1">Instance Properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance Properties&quot;">​</a></h2><h3 id="gantt" tabindex="-1">gantt <a class="header-anchor" href="#gantt" aria-label="Permalink to &quot;gantt&quot;">​</a></h3><p>Gantt instance</p><h3 id="ticks" tabindex="-1">ticks <a class="header-anchor" href="#ticks" aria-label="Permalink to &quot;ticks&quot;">​</a></h3><p>Caculate the number of ticks based on the user-defined column.</p><h3 id="timeticks" tabindex="-1">timeTicks <a class="header-anchor" href="#timeticks" aria-label="Permalink to &quot;timeTicks&quot;">​</a></h3><p>Caculate the time interval between each tick based on the user-defined column.</p><h3 id="steptime" tabindex="-1">stepTime <a class="header-anchor" href="#steptime" aria-label="Permalink to &quot;stepTime&quot;">​</a></h3><p>Transform the user-defined column timeMetric into a step size in milliseconds.</p><h3 id="fixunit" tabindex="-1">fixUnit <a class="header-anchor" href="#fixunit" aria-label="Permalink to &quot;fixUnit&quot;">​</a></h3><p>Find the appropriate unit for adding or subtracting dayjs when the user-defined column timeMetric is fixed.</p><h3 id="fixunitsteptime" tabindex="-1">fixUnitStepTime <a class="header-anchor" href="#fixunitsteptime" aria-label="Permalink to &quot;fixUnitStepTime&quot;">​</a></h3><p>Transform fixUnit into milliseconds.</p><h3 id="starttime" tabindex="-1">startTime <a class="header-anchor" href="#starttime" aria-label="Permalink to &quot;startTime&quot;">​</a></h3><p>View start time</p><h3 id="endtime" tabindex="-1">endTime <a class="header-anchor" href="#endtime" aria-label="Permalink to &quot;endTime&quot;">​</a></h3><p>View end time, which is different from the gantt instance&#39;s endTime, because the view may be larger than the gantt content, so the view&#39;s endTime may be greater than the gantt&#39;s endTime.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="time2x" tabindex="-1">time2x <a class="header-anchor" href="#time2x" aria-label="Permalink to &quot;time2x&quot;">​</a></h3><p>Parameters: <code>(time: Dayjs, startTime?: Dayjs): number</code></p><p>Calculate the x coordinate based on the time and start time.</p><h3 id="x2time" tabindex="-1">x2time <a class="header-anchor" href="#x2time" aria-label="Permalink to &quot;x2time&quot;">​</a></h3><p>Parameters: <code>(x: number, startTime?: Dayjs): Dayjs</code></p><p>Get time by x</p><h3 id="containerscrolllefttime" tabindex="-1">containerScrollLeftTime <a class="header-anchor" href="#containerscrolllefttime" aria-label="Permalink to &quot;containerScrollLeftTime&quot;">​</a></h3><p>Parameters: <code>(): Dayjs</code></p><p>Calculates the time corresponding to the position of the left scroll bar of the container.</p><h3 id="stagewidthtime" tabindex="-1">stageWidthTime <a class="header-anchor" href="#stagewidthtime" aria-label="Permalink to &quot;stageWidthTime&quot;">​</a></h3><p>Parameters: <code>(): Dayjs</code></p><p>Calculates the time corresponding to the width of the stage.</p><h3 id="length2milliseconds" tabindex="-1">length2milliseconds <a class="header-anchor" href="#length2milliseconds" aria-label="Permalink to &quot;length2milliseconds&quot;">​</a></h3><p>Parameters: <code>(length: number): number</code></p><p>Calculates the milliseconds based on the length of the time axis.</p><h3 id="getwidthbytwotime" tabindex="-1">getWidthByTwoTime <a class="header-anchor" href="#getwidthbytwotime" aria-label="Permalink to &quot;getWidthByTwoTime&quot;">​</a></h3><p>Parameters: <code>(time1: Dayjs, time2: Dayjs): number</code></p><p>Calculates the width of the time axis based on two times.</p>',42)])])}const p=t(o,[["render",n]]);export{u as __pageData,p as default};
