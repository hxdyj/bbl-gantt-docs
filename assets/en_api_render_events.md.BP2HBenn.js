import{_ as t,c as a,o as r,ag as n}from"./chunks/framework.UtM2fnOC.js";const m=JSON.parse('{"title":"EventsRender","description":"","frontmatter":{"layout":"doc","footer":false},"headers":[],"relativePath":"en/api/render/events.md","filePath":"en/api/render/events.md","lastUpdated":1756979819000}'),o={name:"en/api/render/events.md"};function s(d,e,i,c,h,l){return r(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="eventsrender" tabindex="-1">EventsRender <a class="header-anchor" href="#eventsrender" aria-label="Permalink to &quot;EventsRender&quot;">​</a></h1><p>EventRender Class is responsible for rendering the events part of the Gantt instance.</p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><h3 id="constructor-1" tabindex="-1">constructor <a class="header-anchor" href="#constructor-1" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>Parameters: <code>(gantt: Gantt, renderer: Render)</code></p><p>constructor function, which takes the Gantt instance and renderer instance as parameters.</p><h2 id="instance-properties" tabindex="-1">Instance Properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance Properties&quot;">​</a></h2><h3 id="gantt" tabindex="-1">gantt <a class="header-anchor" href="#gantt" aria-label="Permalink to &quot;gantt&quot;">​</a></h3><p>Gantt instance</p><h3 id="renderer" tabindex="-1">renderer <a class="header-anchor" href="#renderer" aria-label="Permalink to &quot;renderer&quot;">​</a></h3><p>Render instance</p><h3 id="g" tabindex="-1">g <a class="header-anchor" href="#g" aria-label="Permalink to &quot;g&quot;">​</a></h3><p>The G instance of the events part</p><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">​</a></h2><h3 id="render" tabindex="-1">render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render&quot;">​</a></h3><p>Renders the entire events part.</p><h3 id="destroy" tabindex="-1">destroy <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy&quot;">​</a></h3><p>Destroys the events part.</p><h3 id="removeevent" tabindex="-1">removeEvent <a class="header-anchor" href="#removeevent" aria-label="Permalink to &quot;removeEvent&quot;">​</a></h3><p>Parameters: <code>(event: GanttEventItem)</code></p><p>Removes an event item from the canvas.</p><h3 id="deleteevent" tabindex="-1">deleteEvent <a class="header-anchor" href="#deleteevent" aria-label="Permalink to &quot;deleteEvent&quot;">​</a></h3><p>Parameters: <code>(event: GanttEventItem, emit=false)</code></p><p>Delete an event item (canvas and data), if emit is true, the event will be triggered.</p><h3 id="updateeventitem" tabindex="-1">updateEventItem <a class="header-anchor" href="#updateeventitem" aria-label="Permalink to &quot;updateEventItem&quot;">​</a></h3><p>Parameters: <code>eventOrId: GanttEventItem | string, newData: DeepPartial&lt;Omit&lt;GanttEventItem, &#39;id&#39;&gt;&gt;, needRender = true</code></p><p>Updates an event item, if needRender is true, the canvas will be re-rendered.</p>',27)])])}const u=t(o,[["render",s]]);export{m as __pageData,u as default};
