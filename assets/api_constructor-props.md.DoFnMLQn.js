import{_ as e,c as i,o as t,ag as s}from"./chunks/framework.UtM2fnOC.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"doc","footer":false},"headers":[],"relativePath":"api/constructor-props.md","filePath":"zh/api/constructor-props.md","lastUpdated":1756979819000}'),n={name:"api/constructor-props.md"};function r(o,a,h,l,p,d){return t(),i("div",null,[...a[0]||(a[0]=[s(`<h2 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h2><h3 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h3><p>当前实例的唯一标识符</p><h3 id="parentcontainer" tabindex="-1">parentContainer <a class="header-anchor" href="#parentcontainer" aria-label="Permalink to &quot;parentContainer&quot;">​</a></h3><p>当前实例的 options 设置的元素</p><h3 id="container" tabindex="-1">container <a class="header-anchor" href="#container" aria-label="Permalink to &quot;container&quot;">​</a></h3><p>当前实例的容器元素，用来处理滚动相关的容器，在 parentContainer 下</p><h3 id="body" tabindex="-1">body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;body&quot;">​</a></h3><p>当前实例的 svg 画布包裹的容器，在 container 容器下</p><h3 id="stage" tabindex="-1">stage <a class="header-anchor" href="#stage" aria-label="Permalink to &quot;stage&quot;">​</a></h3><p>当前实例的 svg 画布对象</p><h3 id="parentcontainerrectinfo" tabindex="-1">parentContainerRectInfo <a class="header-anchor" href="#parentcontainerrectinfo" aria-label="Permalink to &quot;parentContainerRectInfo&quot;">​</a></h3><p>当前实例的 parentContainer 元素的矩形信息</p><h3 id="containerrectinfo" tabindex="-1">containerRectInfo <a class="header-anchor" href="#containerrectinfo" aria-label="Permalink to &quot;containerRectInfo&quot;">​</a></h3><p>当前实例的 container 元素的矩形信息</p><h3 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data&quot;">​</a></h3><p>当前实例的原始数据</p><h3 id="list" tabindex="-1">list <a class="header-anchor" href="#list" aria-label="Permalink to &quot;list&quot;">​</a></h3><p>当前实例的处理后的数据，包含了每个任务的开始结束时间，颜色等信息</p><h3 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h3><p>当前实例的配置项</p><h3 id="status" tabindex="-1">status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;status&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	eventMoving</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //事件是否正在移动事件</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	eventResizing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //事件是否正在调整大小</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">	addEventIteming</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //是否正在新增事件项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当前实例状态</p><h3 id="eventbus" tabindex="-1">eventBus <a class="header-anchor" href="#eventbus" aria-label="Permalink to &quot;eventBus&quot;">​</a></h3><p>当前实例的事件总线对象</p><h3 id="view" tabindex="-1">view <a class="header-anchor" href="#view" aria-label="Permalink to &quot;view&quot;">​</a></h3><p>当前实例的<a href="/api/view-class">视图对象</a></p><h3 id="time" tabindex="-1">time <a class="header-anchor" href="#time" aria-label="Permalink to &quot;time&quot;">​</a></h3><p>当前实例的<a href="/api/time-class">时间对象</a></p><h3 id="render" tabindex="-1">render <a class="header-anchor" href="#render" aria-label="Permalink to &quot;render&quot;">​</a></h3><p>当前实例的<a href="/api/render-class">渲染对象</a></p><h3 id="mintime" tabindex="-1">minTime <a class="header-anchor" href="#mintime" aria-label="Permalink to &quot;minTime&quot;">​</a></h3><p>当前实例的根据数据计算出的最小时间，Dayjs 对象</p><h3 id="maxtime" tabindex="-1">maxTime <a class="header-anchor" href="#maxtime" aria-label="Permalink to &quot;maxTime&quot;">​</a></h3><p>当前实例的根据数据计算出的最大时间，Dayjs 对象</p><h3 id="createtime" tabindex="-1">createTime <a class="header-anchor" href="#createtime" aria-label="Permalink to &quot;createTime&quot;">​</a></h3><p>当前实例的创建时间</p>`,38)])])}const u=e(n,[["render",r]]);export{k as __pageData,u as default};
